How this may be organized

Just using web.py for the front end probably.
two pages
    page where you pick the two pages, (has all the validity checking)
    sends the form to some backend python
    backend returns just a simple list of the path
    then second frontend page can display it however I want to.

backend python
takes two pages -> returns list of links between them.

python functions needed
    Parse the wikipedia dump into a useable graph
    Do some analysis to get some good data for my heuristic about how closely
    categories are related.

    The actuial searching algorithm.

    Things my graph nodes need to contain.
    Links to other nodes //duh
    Categories they are a part of.

I probably can't just have a dictionary or anything for my graph (well maybe)
But I will probably have too many nodes to do something like that, I'll have
to have some sort of database structure for this to work.
options
    dictionaries
    flockdb //looks promising.
        Probably a good bet since I am having this implemented as a web app
        and I don't want to load the entire graph into memory every time.
            That would be the worst!
        looks rough though and has a lot of yucky dependencies
    couchdb or another nosql
        could work but I wonder how quickly it would be to make a bunch of queries in a row (like lots and lots of queries in a row)

    need to do some more research into storing and operating on large graphs,
    I want something simple where I have to write the a* algorith my self as
    that is part of the requierments of the assignment.
